{"version":3,"sources":["Hooks/useToggleState.js","Hooks/useInputState.js","Components/TodoItem.js","Components/TodoForm.js","Components/TodoList.js","Hooks/useTodoState.js","App.js","serviceWorker.js","index.js"],"names":["useToggle","initialVal","useState","value","setValue","toggle","useInputState","initalVal","handleChange","evt","target","reset","useStyles","makeStyles","theme","root","width","backgroundColor","palette","background","paper","inline","display","TodoItem","_id","task","name","complete","editTodo","toggleComplete","removeTodo","classes","editing","toggleEditing","editName","setName","resetName","editTask","setTask","resetTask","List","className","onSubmit","e","preventDefault","TextField","variant","margin","fullWidth","id","label","onChange","autoFocus","Button","color","buttonSpacing","type","ListItem","alignItems","Checkbox","checked","onClick","ListItemText","primary","secondary","IconButton","Divider","marginTop","spacing","flexDirection","avatar","main","form","submit","TodoForm","React","memo","createNewTodo","todo","setTodo","resetTodo","handleReset","Paper","TodoListMemo","initialTodos","todoList","setTodoList","newName","newTodo","newTodoObject","axios","post","then","res","data","console","log","delete","newList","filter","editTodoObject","map","useTodoState","useEffect","get","catch","err","key","flexGrow","menuButton","marginRight","title","ButtonAppBar","AppBar","position","Toolbar","Typography","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7abe7864.chunk.js","sourcesContent":["import { useState } from 'react';\n\nfunction useToggle(initialVal = false){\n\n  //reserving a piece of state\n  const [value, setValue] = useState(initialVal);\n  const toggle = () => {\n    setValue(!value);\n  }\n return [value, toggle];\n}\n\nexport default useToggle","import { useState } from \"react\";\n\nfunction useInputState(initalVal = \"\") {\n  const [value, setValue] = useState(initalVal);\n\n  const handleChange = (evt) => {\n    setValue(evt.target.value);\n  };\n\n  const reset = () => {\n    setValue(\"\");\n  };\n\n  return [value, handleChange, reset];\n}\n\nexport default useInputState;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport useToggle from \"../Hooks/useToggleState\";\nimport useInputState from \"../Hooks/useInputState\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { Checkbox } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper,\n  },\n  inline: {\n    display: \"inline\",\n  },\n}));\n\nfunction TodoItem({\n  _id,\n  task,\n  name,\n  complete,\n  editTodo,\n  toggleComplete,\n  removeTodo,\n}) {\n  const classes = useStyles();\n  const [editing, toggleEditing] = useToggle(false);\n  const [editName, setName, resetName] = useInputState(name);\n  const [editTask, setTask, resetTask] = useInputState(task);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    editTodo(_id, editName, editTask);\n    resetName();\n    resetTask();\n    toggleEditing();\n  };\n\n\n  return (\n    <List className={classes.root}>\n      {editing ? (\n        <form onSubmit={handleSubmit}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            id=\"Name\"\n            label=\"Name\"\n            name=\"Name\"\n            value={editName}\n            onChange={setName}\n            autoFocus\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            id=\"Todo\"\n            label=\"Todo\"\n            name=\"Todo\"\n            value={editTask}\n            onChange={setTask}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.buttonSpacing}\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n        </form>\n      ) : (\n        <>\n          <ListItem alignItems=\"flex-start\">\n            <Checkbox checked={complete} onClick={() => toggleComplete(_id, name, task, complete)} />\n            <ListItemText primary={name} secondary={task} />\n            <IconButton onClick={() => removeTodo(_id)}>\n              <DeleteIcon />\n            </IconButton>\n            <IconButton onClick={toggleEditing}>\n              <EditIcon />\n            </IconButton>\n          </ListItem>\n          <Divider />\n        </>\n      )}\n    </List>\n  );\n}\n\nexport default TodoItem;\n","import React from \"react\";\nimport useInputState from \"../Hooks/useInputState\";\nimport { makeStyles, Paper, Button } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\n// import axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  buttonSpacing: {\n    width: \"50%\",\n  },\n}));\n\nconst TodoForm = React.memo(({ createNewTodo }) => {\n  const classes = useStyles();\n\n  const [name, setName, resetName] = useInputState(\"\");\n  const [todo, setTodo, resetTodo] = useInputState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    createNewTodo(name, todo);\n    handleReset();\n  };\n\n  const handleReset = () => {\n    resetName();\n    resetTodo();\n  };\n\n  return (\n    <Paper>\n      <form className={classes.form} onSubmit={handleSubmit}>\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          fullWidth\n          id=\"Name\"\n          label=\"Name\"\n          name=\"Name\"\n          value={name}\n          onChange={setName}\n          autoFocus\n        />\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          fullWidth\n          id=\"Todo\"\n          label=\"Todo\"\n          name=\"Todo\"\n          value={todo}\n          onChange={setTodo}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.buttonSpacing}\n          type=\"submit\"\n        >\n          Submit\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          className={classes.buttonSpacing}\n          onClick={handleReset}\n        >\n          Reset\n        </Button>\n      </form>\n    </Paper>\n  );\n})\n\n\n\nexport default TodoForm;","import React, { useEffect } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport TodoForm from \"./TodoForm\";\nimport List from \"@material-ui/core/List\";\nimport useTodoState from \"../Hooks/useTodoState\";\n// import { makeStyles } from \"@material-ui/core/styles\";\nimport axios from \"axios\";\nimport Paper from \"@material-ui/core/Paper\";\n// import Faker from \"faker\";\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     width: \"100%\",\n//     maxWidth: 360,\n//     backgroundColor: theme.palette.background.paper,\n//   },\n// }));\n\nfunction TodoList() {\n  // const classes = useStyles();\n  const initialValues = [];\n\n  const {\n    todoList,\n    setTodoList,\n    createNewTodo,\n    removeTodo,\n    editTodo,\n    toggleComplete,\n  } = useTodoState(initialValues);\n\n  useEffect(() => {\n    axios\n      .get(`http://localhost:5000/todos/`)\n      .then((res) => {\n        res.data.map(task =>{\n          console.log(task)\n          setTodoList(res.data)\n        })\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  },[setTodoList]);\n\n  return (\n    <Paper>\n      {todoList.map((task) => (\n        <List key={task._id}>\n          <TodoItem\n            {...task}\n            editTodo={editTodo}\n            toggleComplete={toggleComplete}\n            removeTodo={removeTodo}\n          />\n        </List>\n      ))}\n      <TodoForm createNewTodo={createNewTodo} />\n    </Paper>\n  );\n}\n\nconst TodoListMemo = React.memo(TodoList);\n\nexport default TodoListMemo;\n\n// function TodoApp() {\n//   const classes = useStyles();\n\n//   return (\n//     <Paper>\n//       <TodoList\n//         todoList={todoList}\n//         className={classes.todoList}\n//         createNewTodo={createNewTodo}\n//         editTodo={editTodo}\n//         toggleComplete={toggleComplete}\n//         removeTodo={removeTodo}\n//       />\n//     </Paper>\n//   );\n// }\n\n// export default TodoApp;\n","import { useState } from \"react\";\nimport axios from \"axios\";\n\nexport default (initialTodos) => {\n  const [todoList, setTodoList] = useState(initialTodos);\n\n  return {\n    todoList,\n    setTodoList,\n    createNewTodo: (newName, newTodo) => {\n      const newTodoObject = {\n        name: newName,\n        task: newTodo,\n        complete: false,\n      };\n      axios\n        .post(\"http://localhost:5000/todos/add\", newTodoObject)\n        .then((res) => {\n          newTodoObject._id = res.data._id;\n          setTodoList([...todoList, newTodoObject]);\n        });\n    },\n\n    removeTodo: (id) => {\n      console.log(id);\n      axios.delete(`http://localhost:5000/todos/delete/${id}`);\n      const newList = todoList.filter((todo) => todo._id !== id);\n      setTodoList(newList);\n    },\n\n    editTodo: (id, name, task) => {\n      const editTodoObject = {\n        _id: id,\n        name: name,\n        task: task,\n      };\n      setTodoList(\n        todoList.map((todo) => (todo._id === id ? editTodoObject : todo))\n      );\n      axios.post(\n        `http://localhost:5000/todos/update/${id}?name=${name}&task=${task}`\n      );\n    },\n\n    toggleComplete: (id, name, task, complete) => {\n      const newList = todoList.map((todo) =>\n        todo._id === id ? { ...todo, complete: !todo.complete } : todo\n      );\n      setTodoList(newList);\n      axios.post(\n        `http://localhost:5000/todos/update/${id}?name=${name}&task=${task}&complete=${!complete}`\n      );\n    },\n  };\n};\n\n//   const [todoList, setTodoList] = useState(initialValues);\n\n//   const createNewTodo = (newName, newTodo) => {\n//     const newTodoObject = {\n//       id: uuidv4(),\n//       name: newName,\n//       task: newTodo,\n//       completed: false,\n//     };\n//     setTodoList([...todoList, newTodoObject]);\n//   };\n\n//   const toggleComplete = (id) => {\n//     const newList = todoList.map((todo) =>\n//       todo.id === id ? { ...todo, completed: !todo.completed } : todo\n//     );\n//     setTodoList(newList);\n//   };\n\n//   const removeTodo = (id) => {\n//     const newList = todoList.filter((todo) => todo.id !== id);\n//     setTodoList(newList);\n//   };\n\n//   const editTodo = (id, name, task) => {\n//     const newList = todoList.map((todo) =>\n//       todo.id === id\n//         ? {\n//             ...todo,\n//             name: name,\n//             task: task,\n//           }\n//         : todo\n//     );\n//     setTodoList(newList);\n//   };\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TodoList from \"./Components/TodoList\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n// import Button from \"@material-ui/core/Button\";\n// import IconButton from \"@material-ui/core/IconButton\";\n// import MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  todoList: {\n    marginTop: \"1.5rem\",\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Todo List\n          </Typography>\n          {/* <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton> */}\n        </Toolbar>\n      </AppBar>\n      <div className={classes.todoList}>\n        <TodoList/>\n      </div>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport \"./index.css\"\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}